#!/usr/bin/env perl
use strict;
use utf8;
use warnings qw(all);

use constant WORD_SIZE => 8;
use constant DATA_SIZE => 65536;

local ($|, $/) = (1, \1);

my @data = (0) x DATA_SIZE;
my (%start, %end);
my ($ip, $si) = (0, 0);

my $op = {
    q(>) => sub { $si = ($si + 1) % @data },
    q(<) => sub { $si = ($si - 1) % @data },
    q(+) => sub { $data[$si] = ($data[$si] + 1) % (1 << WORD_SIZE) },
    q(-) => sub { $data[$si] = ($data[$si] - 1) % (1 << WORD_SIZE) },
    q(.) => sub { print STDOUT chr $data[$si] },
    q(,) => sub { $data[$si] = ord <STDIN> },
    q([) => sub { $ip = $data[$si] ? $ip : $end{$ip} },
    q(]) => sub { $ip = $start{$ip} - 1 },
};

my @code = grep { exists $op->{$_} } <DATA>;

my @stack;
for my $i (0 .. $#code) {
    if ($code[$i] eq q([)) {
        push @stack => $i;
    } elsif ($code[$i] eq q(])) {
        $end{$start{$i} = pop @stack} = $i;
    }
}

while ($ip <= $#code) {
    $op->{$code[$ip]}->();
} continue {
    ++$ip;
}

print qq(\n);

#__DATA__
#++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.

__DATA__
+++++++++++
>+>>>>++++++++++++++++++++++++++++++++++++++++++++
>++++++++++++++++++++++++++++++++<<<<<<[>[>>>>>>+>
+<<<<<<<-]>>>>>>>[<<<<<<<+>>>>>>>-]<[>++++++++++[-
<-[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]>[<<[>>>+<<<
-]>>[-]]<<]>>>[>>+>+<<<-]>>>[<<<+>>>-]+<[>[-]<[-]]
>[<<+>>[-]]<<<<<<<]>>>>>[+++++++++++++++++++++++++
+++++++++++++++++++++++.[-]]++++++++++<[->-<]>++++
++++++++++++++++++++++++++++++++++++++++++++.[-]<<
<<<<<<<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-]<-[>>.>.<<<
[-]]<<[>>+>+<<<-]>>>[<<<+>>>-]<<[<+>-]>[<+>-]<<<-]
